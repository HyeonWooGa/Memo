CSS
2022.03.07 9:50

#3 LEARNING CSS

#3.0 How to Add CSS to HTML
-We should know how we can add CSS to the HTML page.
1)Put HTML cord and CSS cord at same HTML file
2)Separates HTML from CSS - More recommended and Professional way.
ex)
1)<style> should be put on <head> and write css cord between <style> & </style>
2)Make new file, styles.css and link by <link> tag like ‘<link href=“styles.css” rel(relationship)=“stylesheet” />
-If we have separated file that means we can use a CSS page at many HTML pages.

2022.03.08 9:00

# 3.1 Writing Our First CSS Lines
-CSS 코드는 아주 간단하게 생겼다
3가지 규칙 정도만 기억하면 된다.
1)CSS가 하는 일은 HTML 태그를 가리키는 일
ex) 이 태그는 초록색이다, 가리키는 것, selector

blueTitle { 색, 폰트 크기 등등 우리가 원하는 것 뭐든 }

즉, 우리가 HTML 태그를 가리키고 CSS로  잡아와서 우리가 원하는 건 뭐든 쓸수 있음
Way 1) <style> 태그 안에 selctor 로 태그 이름을 정확히 쓰고 중괄호를 열어줌
(CSS의 속성은 무수히 많고 다 외우지 않고 속성들을 어떻게 올바르게 쓰는 지 알려줌, 규칙 같은 것들, 점점 더 연습해 나감)
color 와 같이 속성의 이름을 쓰고 콜론 뒤에 값을 적어준후 세미콜른을 이용해 한 줄을 작성.
CSS속성은 띄워쓰기가 없고-로 이어줌 그리고 콜론과 세미콜론 중요

h1 {
                color: yellowgreen;
                text-decoration: underline;
                font-size: 50px;
            }

CSS는 위와 같이 간단하고 이제 연습만 하면 됌
There are so many attributes

Visual code studio에 확성화 되는 모든 속성들을 사용 가능

우리도 앞으로 자유롭게 사용할 수 있을 거니까 니꼬를 믿고 대신 CSS가 기본적으로 어떻게 동작하는지만 기억해 두면 됌

우선은 태그의 id 가 아닌 태그이름 자체를 selector로 사용하고 있음

셀렉터(=태그이름) {
	속성이름: 속성값;
}

#3.2 What Does Cascading Mean
-Cascading Style Sheet
Cascading의 의미는 위에서 아래로 내려온다는 뜻이고 맨 밑에 있는 CSS 코드로 적용됌
ex) inline CSS or External CSS 상관 없이
맨 마지막에 적용된 속성으로 웹사이트에 보여짐 그리고 셀렉터를 여러번 호출해서 각각의 속성을 적는 것도 가능하지만 셀렉터 한 번에 각각의 속성을 넣는 것이 더 깔끔하고 좋음

#3.3 Blocks and Inlines
-웹사이트들은 박스들로 이루어져 있고 큰 박스안에 작은 여러개의 박스가 있기도 함
-box들은 그 옆에 아무것도 오지 않음
ex) div, header, main, section, footer, article, etc
-옆에 다른 요소가 오지 못하는 것은 block
(이제 box를 block이라고 부름)
옆에 다른 요소가 올 수 있는 것은 inline(in the same line)
-뭐가 블록이고 뭐가 인라인인지 알면 나중에 화면을 디자인 하는 데 엄청 유용하다.
-inline인 태그의 갯수가 더 적어서 inline 태그를 기억하는 것이 더 좋다.
<span>, <a>, <img> 정도만 알아두자
나머지들은 대략 block인지 아닌지 감이 온다

#3.4 Margin Part One
-Block 옆에는 아무것도 올 수 없고,
반대로 inline 옆에는 뭔가 올 수 있지
-Block을 inline으로 inline을 block으로 바꿀 수 있음, 이것은 display 속성으로 한다.
display에는 수 많은 옵션이 있고 이 영상에서는 inline, block에 대해서 이야기함
-inline 은 높이와 너비가 없어서 content 가 없는 div를 display 속성을 이용해서 inline으로 바꿔주면 div가 없어진다
-**Inlines do not have width, height
blocks have width, height**
-boxes(=blocks) have 3 really good features, margin padding border.
-브라우저는 자동으로 스타일을 준다.
마진도 그중에 하나
body
{
display: block;
margin: 8px;
}
기본으로 주어짐
-마진(margin)은 박스(box)의 경계(border) 바깥에 있는 공간
-임의로 마진을 없애 주거나 맘대로 설정 할 수 있음, 이건 매우 중요한 것

#.3.5 Margin Part Two
-Margin 값을 하나만 주면 4면이 동시에
두개만 주면 상하, 좌우 나눠서
4개 주면 시계방향으로 상 우 하 좌 순이다
-Collapsing margins 현상(상하에서만 발생),
흰 박스(div)의 경계가 보라색 박스(body)의 경계가 같을 때 두 박스의 마진은 하나가 된다.
-하지만 우리는 보라색 박스 안에서 흰 박스의 공간(=마진)을 원한다. 이를 위해서는 Padding 이라는 개념이 등장한다.

#3.6 Paddings and IDs
-한 번 경험해보면 알게 될테니까 Collapsing Margins 현상에 대해 깊게 고민하지 말고 우선 넘어가자
-Padding은 Margin과 반대의 개념
Margin은 경계(=Border) 밖 공간
Padding은 경계(=Border) 안 공간
-Padding도 Margin과 마찬가지로 
한번에 사방의 밸류 값을 주거나, 상하 좌우로
혹은 상 우 하 좌 각각 줄 수 있다.
-Sector로 id를 지정하려면 앞에 #만 붙이면 됌
간단. 
ex)#first
-CSS에서 HTML요소를 지정하는 방법은 두가지
1)태그 이름을 적는다
2)#아이디를 적는다

#3.7 Border
-보더는 경계라는 뜻이고 우리는 한 가지 보더만 씀 다른 것들은 너무 안 예쁘기 때문에
-* {
                border: 2px solid black;                
            }
*은 모든 HTML 요소들을 지정하는 것
-* {
                border: 2px dotted black;                
            }
            html{
                background-color: tomato;
            }
            body{
                margin: 20;
                padding: 20px;
                background-color: thistle;
            }
            div{
                padding: 10px;
            }
            span {
                border-style: solid;
            }
CSS는 Cascading 이기 때문에 span만 바꾸고 싶을 시 * 태그보다 밑에 적으면 됌
모든 코드를 바꿀 필요 없음
-Width와 Height이 Inline에 적용되지 않음은 이미 확인
-Margin과 Padding이 Inline에 적용되는 지는 다음 강의에서 확인
-<!DOCTYPE html>
<html lang="en">
    <head>
        <title>The HyeonWooGa Times</title>
        <style>
            * {
                border: 2px dotted black;                
            }
            html{
                background-color: tomato;
            }
            body{
                margin: 20;
                padding: 20px;
                background-color: thistle;
            }
            div{
                padding: 10px;
            }
            span {
                border-style: solid;
            }
            #first{
                height: 100px;
                width: 100px;
                background-color: whitesmoke;
            }
            #second {
                height: 75px;
                width: 75px;
                background-color: teal;
            }
            #third {
                height: 50px;
                width: 50px;
                background-color: wheat;
            }
        </style>
    </head>
    <body>
        <div id="first">
            <div id="second">
                <div id="third">
                    <span>hello</span>
                </div>
            </div>
        </div>
    </body>
</html>

#3.8 Classes
-Span은 incline box라 (bloack box와 다름) 좌우에만 margin, padding 적용됌
- <!DOCTYPE html>
<html lang="en">
    <head>
        <title>The HyeonWooGa Times</title>
        <style>
            body{
                margin: 20;
            }
            span {
                background-color: teal;
            }
            #tomato,
            #tomato2,
            #tomato3 {
                background-color: tomato;
            }
        </style>
    </head>
    <body>
        <span>hello</span>
        <span id="tomato">hello</span>
        <span>hello</span>
        <span id="tomato2">hello</span>
        <span>hello</span>
        <span id="tomato3">hello</span>
        <span>hello</span>
    </body>
</html>

위와 같이 여러 Selector를 쉼표로 묶을 수 있음
-하지만 id는 각자 고유의 값인게 의의가 있지만 위에 tomato, tomato2, tomato3 와 같이 지정하는 것은 id의 취지와 잘 맞지않음
-요소를 가르치면서 겹쳐도 되는 방법 : class 
ex) #tomato = id=“tomato”
.tomato = class=“tomato”
-Class는 유일할 필요가 없고 한 요소에 여러 가지 클래스도 적용가능 
ex) 한 span 태그에 1개 클래스 적용 가능
한 span 태그에 3개 클래스 적용 가능
<!DOCTYPE html>
<html lang="en">
    <head>
        <title>The HyeonWooGa Times</title>
        <style>
            body{
                margin: 20;
            }
            span {
                background-color: teal;
            }
            .tomato {
                background-color: tomato;
            }
        </style>
    </head>
    <body>
        <span>hello</span>
        <span class="tomato">hello</span>
        <span>hello</span>
        <span class="tomato hello honey potato">hello</span>
        <span>hello</span>
        <span class="tomato">hello</span>
        <span>hello</span>
    </body>
</html>
-command + d를 꾹 누르고 있으면 같은 이름인 코드드를 한번에 수정 가능함
-모든 웹사이트에서는 class를 많이씀 , 대부분 class, id는 가끔씀
-지금가지 class, id, padding, margin, border 등등 많이 알고 있고 만반의 준비를 갖춘거야. CSS의 box layout을 다음 강의부터 배움

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>The HyeonWooGa Times</title>
        <style>
            body{
                margin: 20;
            }
            .btn {
                padding: 5px 10px;
                border-radius: 5px;
            }
            .teal {
                background-color: teal;
            }
            .tomato {
                background-color: tomato;
                color: white;
            }
        </style>
    </head>
    <body>
        <span class="btn teal">hello</span>
        <span class="btn tomato">hello</span>
        <span class="btn teal">hello</span>
        <span class="btn tomato hello honey potato">hello</span>
        <span class="btn teal">hello</span>
        <span class="btn tomato">hello</span>
        <span class="btn teal">hello</span>
    </body>
</html>


#3.9 Inline block
-Display 요소를 사용하기 위해서 밸류값으로 inline, block, inline-bloack 등으로 주면 변환 가능, 끝
-inline-block, block의 성질은 width, height을 가지고 inline처럼 좌우에 다른 요소 배치가능
-inline-block 은 자기 마음대로고 반응형 디자인 기능이 지원되지 않아서 사용하지 않음
-우리는 block에 대해서 배웠고, 옆에 아무것도 못 오는거, inline, 넓이 높이가 적용되서 아무것도 안 보이는 것, inline-block, block들이 옆에 올 수 있게 할 수 있지만 구린거
-다음 강의에 최고인 flex 를 배움

#3.10 Flexbox Part One
-flexbox는 2D에서 아주 유용하다.
-flexbox는 3가지의 룰이 있다.
-1) 부모 엘리먼트에만 적어야하고 자식 엘레먼트에는 아무것도 적으면 안됌	
div 의 부모는 body
body의 display 를 flex로 바꿔준다.
body는 그의 자식들을 컨트롤 할 수 있다.
**자식에게 명시하지 않고 부모에게 명시한다.
div의 부모를 display:flex로 만든다.**
-justify-content 프로퍼티를 이용해서 위치를 조정한다. justify-content: flex-start; 가 default. center, flex-end, space-evenly 와 같은 수만은 옵션 존재
-반응형으로 동작한다. 때문에 뭉개질 수도 있지만 그 문제점은 다음에 해결
-justify-content는 main axis(수평)
align-items는 cross axis(수직)에 적용됌
각각 수평, 수직으로 디폴트 설정 되어 있지만 바꿀 수도 있음
-body의 height 값을 따로 설정해 주지 않으면 height값은 그 안의 컨텐츠 즉 div의 height과 같으므로 align-items를 통해 cross axis 값을 바꿔도 적용이 되지 않는다.
-그러므로 body의 height을 바꿔줘야 하는데 반응형 디자인을 위해 px 단위를 쓰는 것이 아니라 vh(viewpoint height) 단위를 쓴다.
100vh라고 하면 스크린에 보이는 화면 100%의 높이라는 뜻 50은 50% 70은 70%
-align-items는 justify-content처럼 많은 옵션이 있지는 않음
-<!DOCTYPE html>
<html lang="en">
    <head>
        <title>The HyeonWooGa Times</title>
        <style>
            body{
                height: 100vh;
                margin: 20;
                display: flex;
                justify-content: center;
                align-items: center;
            }
            div{
                width: 50px;
                height: 50px;
                background-color: teal;
            }
            #second {
                background-color: wheat;
            }
        </style>
    </head>
    <body>
        <div></div>
        <div id="second"></div>
        <div></div>
    </body>
</html>

#3.11 Flexbox Part Two
-body style 에서 flex-direction 프로퍼티에 column 밸류를 주면 justify-content와 align-items 가 바뀐다.
-flex-direction 의 디폴트는 row
그리고 flex-direction에서 row-reverse, column-reverse를 통해서 방향을 반대로 할 수도 있다.
-반응형 웹이라서 브라우저가 너무 작아지면 박스의 크기가 임의대로 작아지기도 하는 데 
이는, 브라우저가 우리의 넓이 높이 지정값이 시작값으로 생각하고 박스들의 배치에만 신경 쓰기 때문이다.
-하지만 flex-wrap 프로퍼티를 이용해서 wrap의 밸류를 주면 박스들의 크기가 바뀌지 않고 화면 크기에 따라 배치가 조종된다.
wrap-reverse도 가능하고 디폴트 값은 nowrap이다.

#3.12 Fixed
-Position 프로퍼티는 레이아웃보다 위치를 아주조금 위로, 아래로 옮기고 싶을때 사용
-Position 프로퍼티에 fixed 밸류를 주면 해당 box는 브라우저에 처음 표시된 위치에서 고정, 스크롤을 위아래로 해도 그 자리에 고정.
-Position: fixed; 를 하고 box에 top, bottom, right, left 와 같은 프로퍼티를 하나라도 주면, 해당 박스는 다른 박스, margin, padding 등의 다른 조건을 상관 안하게 됌, 같은 레이아웃이 아니게 됌
-Position: fixed; 는 웹사이트의 메뉴 구성에서 많이 사용함, Netflix 메뉴에도 있음
-Opacity는 투명도
**-Position: fixed; 를 사용하고 레이아웃을 사용하지 않고 가장 위에 위치하게 됌**

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>The HyeonWooGa Times</title>
        <style>
            body{
                height: 1000vh;
                margin: 20px;
            }
            div{
                width: 300px;
                height: 300px;
                background-color: teal;
            }
            #green {
                position: fixed;
                opacity: 0.2;
            }
            #different{
                background-color: wheat;
            }
        </style>
    </head>
    <body>
        <div id="green"></div>
        <div id="different"></div>
    </body>
</html>



#3.13 Relative Absoute
-position: static, 레이아웃이 박스를 처음 위치에 두는것, 디폴트값
**-position: realative; 요소가 처음 위치한 곳을 기준으로 위치가 수정되는 것**

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>The HyeonWooGa Times</title>
        <style>
            body{
                height: 1000vh;
                margin: 50px;
            }
            div{
                width: 300px;
                height: 300px;
                background-color: wheat;
            }
            .green{
                background-color: teal;
                height: 100px;
                position: relative;
                top: -10px;
                left: -10px;
                width: 100px;
            }
        </style>
    </head>
    <body>
        <div>
            <div class="green"></div>
        </div>
    </body>
</html>

-이와 별개로 혼자 만져보다 보니 padding을 하면 padding의 별류값 만큼 박스 크기가 커지는 것 발견

-position: absolute; 가장 가까운 position: relative; 인 box를 찾아서 그 안에서 위치 지정
position: relative인 box 가 없으면 body를 기준으로

-Position의 전부 : fixed, relative, absolute, 디폴트로 static
absolute와 relative가 중요 왜냐면 absolute가 필요한 코딩을 많이 할거고 reative한 부모가 필요하다는 사실도 기억하고 있어야함
많은 사람들이 reative한 박스를 만들지 않고 왜 body를 기준으로 위치가 지정되는 실수를함

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>The HyeonWooGa Times</title>
        <style>
            body{
                height: 1000vh;
                margin: 50px;
                background-color: aqua;
            }
            div{
                width: 300px;
                height: 300px;
                background-color: wheat;
            }
            #first {
                position: relative;
            }
            #second{
                position: absolute;
                right: -300px;
                background-color: blueviolet;
            }
            #third {
                position: relative;
                background-color: tomato;
            }
            #fourth {
                position: absolute;
                right: -300px;
                background-color: brown;
            }
        </style>
    </head>
    <body>
        <div id="first">
            <div id="second"></div>
        </div>
        <div id="third">
            <div id="fourth"></div>
        </div>
    </body>
</html>

위와 같이 div 박스 를 상하좌우로 배치가능
id를 클래스로 묶어서 스타일 셀렉터 두개로 줄이기 가능

#3.14 Pseudo Selectors part One

-일단 이해를 하고 나중에 다 연습해볼꺼니까 너무 부담 갖지 않기

-셀렉터를 좀 더 세부적으로 요소들을 선택해 주는것

- id는 #를 쓰고 클래스는 .을 씀

- 스타일 태그 안에서 div: 을 하면 수 많은 옵션이 나옴 ex)     div:first-child {
                background-color: tomato;
            }
            div:last-child {
                background-color: teal;
            }
- 위와 같이 하는게 class나 id를 만드는 것보다 훨씬 좋은 방법, html 코드를 안 건드려도 되서
- ex) 짝수 번호 지정 span:nth-child(2),
            span:nth-child(4) {
                background-color: teal;
            }
	span:nth-child(even) {
                background-color: teal;
            }
	span:nth-child(2n) {
                background-color: teal;
            }
- ex) odd, 2n+1, 3n+1, 4n+1 등등 다양한 n번째 차일드 요소 지정가능, n은 모든 수를 대입함

#3.15 Combinators

- ex) div p span { … } span {
                color: tomato;
            }
           ** div p span {
                color: teal
            } **
        </style>
    </head>
    <body>
        <div>
            <span>hello</span>
            <p>
                Lorem ipsum dolor sit amet consectetur adipiscing elit.
                Quod commodo esequi ipsam odio dolorem. <span>inside</span>
            </p>
        </div>
- 위와 같이 작성하면 부모 div -> 부모 p -> 자식 span 을 지정해줘서 스타일을 적용한다. 부모는 얼마든지 작성 가능.

- ex) div > span { … } div > span {
                text-decoration: underline;
            }
        </style>
    </head>
    <body>
        <div>
            <span>hello</span>
            <p>
                Lorem ipsum dolor sit amet consectetur adipiscing elit.
                Quod commodo esequi ipsam odio dolorem. <span>inside</span>
            </p>
        </div>
    </body>
- 위와 같이 적용시 부모 div 의 직계 자손 span 에만 스타일 적용 가능.

- ex) p + span { … }             p + span {
                text-decoration: underline;
            }
        </style>
    </head>
    <body>
        <div>
            <p>
                Lorem ipsum dolor sit amet consectetur adipiscing elit.
                Quod commodo esequi ipsam odio dolorem. <span>inside</span>
            </p>
            <span>hello</span>
        </div>
    </body>
- 위와 같이 적용시 p의 바로 옆 형제 span에 스타일 적용 가능.
- 위 자손, 직계 자손, 형제를 찾는 셀렉터는 정말정말 유용한 셀렉터이다.

#3.16 Pseudo Selectors part Two

- ex) p ~ span { … }             p ~ span {
                text-decoration: underline;
            }
        </style>
    </head>
    <body>
        <div>
            <p>
                Lorem ipsum dolor sit amet consectetur adipiscing elit.
                Quod commodo esequi ipsam odio dolorem. <span>inside</span>
            </p>
            <address>hi</address>
            <span>hello</span>
        </div>
    </body>
- 위와 같이 span 이 p 의 형제이지만 바로 옆에 있지 않을 시 ~ 로 적용 가능.

- ex) 셀렉터를 attribute 이용하여 지정 input {
                border: 1px solid black;
            }
            input:last-child {
                border: 1px solid teal;
            }
           ** input:required {
                border: 1px solid tomato;
            } **
        </style>
    </head>
    <body>
        <div>
            <form>
                <input type="text" placeholder="username" />
                <input type="password" placeholder="password" required />
                <input type="submit" />
            </form>
        </div>
    </body>

- ex) 셀렉터를 attribute의 밸류값을 이용하여 지정             input {
                border: 1px solid black;
            }
            input:required {
                border: 1px solid tomato;
            }
           **input[type="submit"] {
                background-color: teal;
            }**
        </style>
    </head>
    <body>
        <div>
            <form>
                <input type="text" placeholder="username" />
                <input type="password" placeholder="password" required />
                <input type="submit" />
            </form>
        </div>
    </body>
- 위의 input[type=“submit”]을 이용해서 input 태그 중 type attribute, submit value 를 가지고 있는 태그 지정 가능. 꼭 input 옆에 [ 가 붙어 있어야함. input[...]

- ex) input[placeholder~=“name”]             input[placeholder~="name"] {
                background-color: pink;
            }
        </style>
    </head>
    <body>
        <div>
            <form>
                <input type="text" placeholder="First name" />
                <input type="text" placeholder="Second name" />
                <input type="password" placeholder="password" required />
                <input type="submit" />
            </form>
        </div>
    </body>
- placeholder attribute 에서 name 밸류를 포함하고 있는 태그 지정.

- 다음 강의에서 input:required { … } 같은 것들 사용하는 걸 공부함, 매우 중요하고 자주 사용함. input[type~=“name”] { … } 같은 것들은 자주 사용하진 않지만 있다는 거 알아두면 됌
- 참조, http://flukeout.github.io 
<!DOCTYPE html>
<html lang="en">
    <head>
        <title>The HyeonWooGa Times</title>
        <style>
            body{
                height: 1000vh;
                margin: 50px;
            }
            input {
                border: 1px solid black;
            }
            input:required {
                border: 1px solid tomato;
            }
            input[type="submit"] {
                background-color: teal;
            }
            input[placeholder~="name"] {
                background-color: pink;
            }
        </style>
    </head>
    <body>
        <div>
            <form>
                <input type="text" placeholder="First name" />
                <input type="text" placeholder="Second name" />
                <input type="password" placeholder="password" required />
                <input type="submit" />
            </form>
        </div>
    </body>
</html>

#3.17 States

- 개발자 도구 -> 검사에서 확일할 수 있는 가장 중요한 selector 는 :hov, state 이다. (:active, :hover, :focus, :visited, :focus-within)
- active 는 보이는 것처럼 이렇게 버튼을 누르고 있을 때 파란 배경색을 가지게 됌, 우리는 스타일 수정 가능 ex)             button:active {
                background-color: tomato;
            }
        </style>
    </head>
    <body>
        <div>
            <button>hello</button>
        </div>
    </body>

- hover 는 마우스가 대상 위에 있을 떄를 말함, 클릭 X, 오직 위에 있을때

- focus 는 대상이 키보드로 선택 되었을 때 ex) 키보드 tab키로 지정

- visited 는 링크에만 적용 되는것, 전에 방문한 링크의 생상을 바꿔줌 ex) a:visited, a:hover, a:focus 적용       (각각의 attribute는 a의 숨은 attribute)
	            a:visited {
                color: tomato;
            }
            a:hover {
                color: teal;
            }
            a:focus {
                color: plum;
            }
        </style>
    </head>
    <body>
            <a href="https://apple.com" >Go to Apple</button>
    </body>

- focus-within 은 좀 다르다, 왜냐면 부모에 적용 됌.

- focus-within 은 focused 인 자식을 가진 부모 엘리먼트의 상태를 말함 다시 focus-within 은 focused 인 자식을 가진 부모 엘리먼트에 적용 ex) 인풋 박스가 포커스 되면 폼 박스 색 변경 form {
                border: 1px solid salmon;
                display: flex;
                flex-direction: column;
                padding: 20px;
            }
            form:focus-within {
                border-color: seagreen;
            }
        </style>
    </head>
    <body>
        <form>
            <input type="text" name="" id="" />
            <input type="text" name="" id="" />
            <input type="text" name="" id="" />
        </form>
    </body>

- :focus-within 의 뜻 해당 태그의 안의 것(within)이 foused 되면 나타나는 상태변형

- form:hover input { … } 은 form 에 overhover 가 되면 input 의 상태 스타일을 변형

- form:hover input:focus { … ] 와 같이 계속 각각의 요소들을 이용해서 셀렉터를 결합해서 사용할 수 있음, 위의 셀렉터 뜻은 form 에 호버 되고 input:focus 가 셀렉 되었을 때(조건) 스타일 변형 상태를 지정,  input이 자식 form이 부모

- 이걸로 아주 많은 것들을 할 수 있고 우린 이거 정말 많이 쓰고 연습도 많이 할거라고 니꼬가 보장함.

#3.18 Recap

- 복습하기 전에 3개의 Psuedo Element 공부 이것들은 실제로 존재하는 element 는 아니지만 스타일링을 할 수 있게 해줌

- ::placeholder 는 placeholder 를 스타일링 할 수 있게 해줌 ex) 아래와 같이 ::placeholder 를 사용하지 않고 input 의 color 를 바꿔준다면 text 의 컬러만 바뀜  input::placeholder {
                color: yellowgreen;
            }
        </style>
    </head>
    <body>
        <form>
            <input type="text" placeholder="Name" />
        </form>
    </body>

- ::selection 은 아주 멋져, 웹사이트에 개성을 불어 넣어줌 text 를 마우스로 드래그 했을 때의 스타일, 즉 배경색, 글씨색 주어서 멋있게 만들 수 있음 ex) p::selection {
                background-color: yellowgreen;
                color: white;
            }
        </style>
    </head>
    <body>
        <p>
            로드맵 충실히 이행하자
	</p>

- 마지막은 ::first-letter 이건 아마 가끔 사용할 수도 있음, 문장의 첫 글자만 바꿔주는 것 ex) p::first-letter {
                background-color: yellowgreen;
                color: white;
                font-size: 50px;
            }
        </style>
    </head>
    <body>
        <p>
            로드맵 충실히 이행하자
	</p>

- 옵션이 정말 많고 쉽다 CSS MDN Document 돌아다니다가 한 번씩 사용해보면 됌 
- 이렇게 selectors, pseudo elements, combinators 에 대해서 끝났음

- state 에 대해서 복습, 위의 내용 참조 state 는 p:activate, 등등 그리고 여러가지 조건을 콤비네이션 할 수도 있음

- combinator 에 대해서 복습, p span { … } 부모 자식관계 p > span { … } 직계 자식 p + span { … } 바로 옆의 형제 p ~ span { … } 아무 곳의 형제

- attribute 를 이용한 selector 복습, input[type=“password”] { … } “password” 라는 type을 가진 input만 선택 input[type~=“password”] input[type$=“password”] input[type^=“password”] 등등 옵션은 다양하다 이걸 다 기억할 필요는 없으니까 이해하는게 중요하다. 니꼬는 그냥 여러가지것들을 보여주고 설명해주는 거, 이걸 연습하다보면 다 기억하게 될 것, 연습할 때 다 알게 될 거라고 니꼬가 신께 맹세했음. 
#3.19 Colors and Variables

- 고급 CSS 로 넘어가기 전에 컬러에 대해 확실하게 짚고 넘어감, 컬러는  CSS 에 정말 중요함, 왜냐면 yellowgreen 같은 기본 컬러 말고 우리가 직접 지정한 컬러를 사용해야 되잖아

- 그리고 변수에 대해서도 이야기함, 변수는 정말 많이 쓰이고 보다보면 아주 멋지다는 것을 알거야, 베리 섹시. 이게 CSS를 프로그래밍 언어처럼 보이게 만들어줌

- 프로그래밍 언어는 아니지만 그 장점을 비슷하게 보여주는 것

- CSS에서 알아야되는 컬러 시스템은 3가지 정도가 있다

- 1) Hexadecimal color (16진수 컬러)     p {color: #FCCE00; } 2) RGB 방식     p {color: rgb(252, 206, 0); } 3) RGBa 방식 (a는 투명도),     p {color: rgba(252, 206, 0, 1); }

- color picker 라는 크롬 확장자 사용

- 스타일 태그안에 :root 라는 요소 추가 :root 라는 요소는 기본적으로 무선 안에서 뿌리가 됌, 출발점

- :root { —main-color: #fcce00; } :root 요소 안에 —main-color 라는 변수 이름을 작성해서 컬러 코드를 가지게 함, —main-color-를 document 의 root에 저장

- ex) 2가지 요소의 색을 한번 수정으로 동시 수정 가능, 컬러를 변수에 저장하고 있으니까  :root {
                --main-color: #fcce00;
            }
            body{
                height: 1000vh;
                margin: 50px;
            }
            p {
                background-color: var(--main-color);
            }
            a {
                color: var(--main-color);
            }

- 변수는 dash 2 개 다음에 dash 1 개 그리고 변수 이름, 이렇게 이름 지어야함

- 빈 공간이 있을땐 - 사용해야 함 빈 공간 있으면 안 되고 사용할땐 var( … ) 으로 사용 하면 됌

- 컬러만 아니라 —default-border: 1px solid var(—main-color); 로 정의하고 var ( … ) 로 사용 가능

- 변수는 IE 를 제외하고 모두 사용가능

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Unicorn Times</title>
        <style>
            :root {
                --main-color: #47c216;
                --default-border: 1px solid black;
            }
            body{
                height: 1000vh;
                margin: 50px;
            }
            p {
                background-color: var(--main-color);
            }
            a {
                color: var(--main-color);
                border: var(--default-border);
            }
        </style>
    </head>
    <body>
        <p>
            로드맵 충실히 이행하자
        </p>
        <a href="#">What'S Your Story</a>
    </body>
</html>


#4.0 Transitions

- 이제 고오급 CSS 를 배운다. Animation, Transformation, Transition 같은 것들

- 왜냐면, CSS는 CSS가 할수 있는 것에 많이 발전되어있다. 전에는 자바스크립트가 필요 했지만 지금은 CSS로 다 할 수 있다.

- Transition 은 기본적으로 어떤 상태에서 다른 상태로의 “변화”를 애니메이션으로 만드는 방법이야

- 기본 state attribute 들은 너무 급작스럽게 색이 바뀜 (애니매이션 X) 그래서 애니매이션을 줄 떄, transition 을 사용

<style>
            a {
                color : wheat;
                background-color: tomato;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 5px;
                font-size: 66px;
            }
            a:hover {
                color: tomato;
                background-color: wheat;
            }
        </style>
    </head>
    <body>
        <a href="#">Meta Story</a>
    </body>


- 1) transition 이라는 속성은 state 가 없는 요소에 붙여야해, a { … } 가 있고 a:hover { … } 가 있을때, root 인 a { … } 에 입력해야함 

- 2) a { … } 와 a:hover { … } 가 서로 다른 스타일을 가지고 있을 때만 사용가능, 사람들이 둘의 스타일을 다르게 설정하지 않고 transition: 요소에서 밸류 값을 주는 실수를 함

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Meta Story</title>
        <style>
            a {
                color : wheat;
                background-color: tomato;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 5px;
                font-size: 66px;
                transition: background-color, font-size 5s ease-in-out;
            }
            a:hover {
                color: tomato;
                background-color: wheat;
                font-size: 88px;
            }
        </style>
    </head>
    <body>
        <a href="#">Meta Story</a>
    </body>
</html>


- transition 은 꽤 쿨하고 앞으로 다양하게 응용 할 수 있을듯. 개굿.

#4.1 Transitions part Two

- ease-in function 은 기본적으로 브라우저에게 애니메이션이 어떻게 변할지 알려주는 것

- matthewlein.com 은 transition이 어떻게 움직이는 지 알려주는 사이트

- linear 같은 속도로 좌우 직선으로 움직임
- ease-in 시작 점에서 보다 점점 빨라짐
- ease-out 끝에서 느려지게 움직임
- ease-in-out 빨리지고 느려지면서 움직임
- 디폴트로 갖고있는 것은 linear, ease-in, ease-in-out, ease-out, ease 이다.

a {
                color : wheat;
                background-color: tomato;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 5px;
                font-size: 66px;
                transition: background-color, font-size 5s ease-in-out;
            }


- cubic-bezier 라는 건 또하나의 다른 property 인데 애니매이션의 움직임을 커스터마이징 할 수 있음

a {
                color : wheat;
                background-color: tomato;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 5px;
                font-size: 66px;
                transition: background-color, font-size 1s cubic-bezier(0.785, 0.135, 0.150, 0.860);
            }
a {
                color : wheat;
                background-color: tomato;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 5px;
                font-size: 66px;
                transition: background-color, font-size 1s cubic-bezier(0.785, 0.135, 0.150, 0.860);
            }

- 위 사이트에서 커스터마이징을 할 수도 있지만 대부분 ease-in, ease-out, ease-in-out 사용 위를 완벽하게 하고 싶을때 커스터마이징 사용

- transition 은 state 에 따라 바뀌는 property 를 가지고 있으면 사용 되는 것 trasition 을 사용하지 않는다면, 자동으로 그냥 바뀌기만 함, 예쁘지 않음

- 가장 일반적으로 사용하는 방법은 ‘all’ 을 쓰는 것, 가끔 몇 요소만 transition 하고 싶을 때 transtion 의 첫 요소에 background-color, font 등의 요소를 입력하고 사용, 그때는 지정되지 않은 border-radius 나 text-color 는 아주 빠르게 변함, 이건 우리가 어떻게 만드는 지에 따라 다름

a {
                color : wheat;
                background-color: tomato;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 5px;
                font-size: 66px;
                transition: all 1s cubic-bezier(0.785, 0.135, 0.150, 0.860);
            }

#4.2 Transformations

- HTML <body> 태그에 <img src=“img/blah.png” /> 을 만들어 주고

- <head> 태그 <style> 태그 안에서 img { border : 1 px solid black; border-radius: 50% } 를 적어준다. border-radius : 50% 는 원이다.

- transform 은 이미지를 변형 시켜주고 어떤 변형이던 상관없이 다 할 수 있다.

- 셀렉터로 해당 태그를 스타일 태그 속에서 불러온 뒤 transform: blah( ); 로 적용

- rotateX( deg), rotateY( deg), rotateZ( deg), scale( , ), scaleX( ), scaleY( ), translateX( px), tanslateY( px)

- transform 은 다른 형제를 변형시키지 않음

- 다른 요소의 box를 변형시키지 않고 원하는 요소를 이동시키기 위해서 사용함

- 여러 개의 트랜스폼을 결합 할 수 있다.

- 스테이츠 들을 사용해서 
            img {
                border: 1px solid black;
                border-radius: 50%;
                height: 300px;
                width: 300px;
                transition: transform 5s ease-in-out;
            }
            img:hover {
                transform: rotateZ(90deg);
            }
	위와 같이 트랜스폼, 트랜지션을 결합해서 	사용 가능, 트랜지션은 루트에 있어야하는	 것을 기억

- CSS 의 그래픽은 3d가 가능하고 GPU로 돌아감

- transform mdn 에 수많은 예시가 있고 복붙해서 사용가능

- nft 웹페이지 만들때 화려하게 만들 수 있겠다.

#4.3 Animations part One

- 특별 스테이츠에 재생되는 애니매이션이 아니라 계속 재생되는 애니메이션
            @keyframes coinFlip {
                from {
                    transform: rotateX(0);
                }
                to {
                    transform: rotateX(360deg);
                }
            }
            img {
                border: 1px solid black;
                border-radius: 50%;
                height: 300px;
                width: 300px;
                animation: coinFlip 5s ease-in-out;
            }

- @keyframes 애니메이션이름 { from { } to { } } 로 애니메이션 만들어 주고

- 해당 인자 스타일 태그 안에 animation: 애니메이션이름 시간 ease-in-out 으로 적어주면 동작 가능

- ease-in-out 뒤에 infinite 적어주면 무한 애니메이션 가능

#4.4 Animations part Two

- 위의 애니매이션 동작법 from to 를 0% 50% 100% 단계로 만들 수 있음

- 우리는 원하는 만큼 많은 단계들로 만들 수 있음

- 우리는 트랜지션, 트랜스폼, 애니매이션 등을 만들었음 앞으로 계속 연습할거니까 걱정하지말고 재밌게 공부하기

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Meta Story</title>
        <style>
            body {
                display: flex;
                height: 100vh;
                justify-content: center;
                align-items: center;
            }
            @keyframes coinFlip {
                0% {
                    transform: rotateY(0);
                }
                50% {
                    transform: rotateY(180deg) scale(1.5);
                    border-radius: 0px;
                    border-color: tomato;
                    opacity: 0;
                }
                100% {
                    transform: rotateY(0);
                }
            }
            img {
                border: 5px solid black;
                border-radius: 50%;
                height: 300px;
                width: 300px;
                animation: coinFlip 5s linear infinite;
            }
        </style>
    </head>
    <body>
        <img src="img/Spoon X Meta Kongz.png" />
    </body>
</html>


#4.5 Media Queries

- Media Query 는 오직 CSS 만을 이용해서 스크린의 사이즈를 알 수 있는 방법이야 웹사이트를 보고 있는 사용자의 스크린

- 누군가가 아이폰, 엄청 큰 화면, 가로모드 등으로 볼 때 CSS 스타일으 바꿀 수 있음

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Meta Story</title>
        <style>
            body {
                display: flex;
                height: 100vh;
                justify-content: center;
                align-items: center;
                flex-direction: column;
            }
            div {
                background-color: teal;
                height: 200px;
                width: 200px;
            }
            @media screen and (max-width: 600px) {
                div {
                    background-color: tomato;
                }
            }
            @media screen and (min-width: 601px) and (max-width: 1200px) and (orientation: landscape) {
                div {
                    background-color: wheat;
                }
            }
            @media screen and (min-width: 1201px) {
                div {
                    background-color: turquoise;
                }
            }
            span {
                font-size: 36px;
            }
            @media screen and (orientation: landscape) {
                span {
                    display: none;
                }
            }
        </style>
    </head>
    <body>
        <div></div>
        <span>Please flip your phone :(</span>
    </body>
</html>

#4.6 Media Queries Recap

- media query 는 우리가 조건을 추가하는 방법, 코드의 조건을 적는거지

- 이 조건이 참이라면 이 CSS를 실행하라는 조건을 주는 것
- @media 조건 { } 으로 열고 닫음

- @media 조건 { } 안에 HTML 요소를 불러와서 CSS 스타일을 입힘

- @media 조건 and 조건 { }, and 로 각 조건들을 연결 해줄 수 있고 (min-width: ), (max-width: ), (orientation: ) 등이 쓰임 

- (min-device-width: ) 조건도 있고 이는 데스크탑 브라우저는 이해하지 못하고 핸드폰에서만 사용 가능

- 스크린이 레티나 디스플레이인지도 가늠할 수 있음, 그 외에 다양한 조건들이 있음, media query mdn 문서 확인

- @media ‘screen’ 을 대신해 @media print 도 사용 가능하다. @media print 는 우리가 스크린샷을 찍을 때의 화면 보이는 방법을 설정함

- media query 는 CSS 를 파워풀하게 만드는 데 매우 필요함

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Meta Story</title>
        <style>
            body {
                display: flex;
                height: 100vh;
                justify-content: center;
                align-items: center;
                flex-direction: column;
            }
            div {
                background-color: teal;
                height: 200px;
                width: 200px;
            }
            @media screen and (max-width: 600px) {
                div {
                    background-color: tomato;
                }
            }
            @media screen and (min-width: 601px) and (max-width: 1200px) and (orientation: landscape) {
                div {
                    background-color: wheat;
                }
            }
            @media screen and (min-width: 1201px) {
                div {
                    background-color: turquoise;
                }
            }
            span {
                font-size: 36px;
            }
            @media screen and (orientation: landscape) {
                span {
                    display: none;
                }
            }
            @media print {
                body {
                    background-color: tomato;
                }
            }
        </style>
    </head>
    <body>
        <div></div>
        <span>Please flip your phone :(</span>
    </body>
</html>


